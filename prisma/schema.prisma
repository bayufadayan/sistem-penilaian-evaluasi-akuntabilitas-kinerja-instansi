generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  components Component[]
  users      User[]
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  password            String
  nip                 BigInt
  name                String
  role                Role
  gender              Gender
  status              Status
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  id_team             Int           @default(1)
  resetPasswordExpire DateTime?
  resetPasswordToken  String?
  ActivityLog         ActivityLog[]
  Score               Score[]
  team                Team          @relation(fields: [id_team], references: [id], onDelete: SetDefault)
}

model EvaluationSheet {
  id                   String                 @id @default(cuid())
  title                String
  date_start           DateTime
  date_finish          DateTime
  description          String
  status               StatusEvaluation       @default(PENDING)
  year                 String
  color                String                 @default("bg-green-600")
  components           Component[]
  evaluationSheetScore EvaluationSheetScore[]
}

model Component {
  id               Int              @id @default(autoincrement())
  name             String
  description      String?
  weight           Float
  id_team          Int
  id_LKE           String
  component_number Int              @default(0)
  evaluation       EvaluationSheet  @relation(fields: [id_LKE], references: [id], onDelete: Cascade)
  team             Team             @relation(fields: [id_team], references: [id])
  componentScore   ComponentScore[]
  subComponents    SubComponent[]
}

model SubComponent {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String?
  weight              Float
  id_components       Int
  subcomponent_number Int                 @default(0)
  criteria            Criteria[]
  component           Component           @relation(fields: [id_components], references: [id], onDelete: Cascade)
  subComponentScore   SubComponentScore[]
}

model Criteria {
  id               Int          @id @default(autoincrement())
  name             String
  description      String?
  id_subcomponents Int
  criteria_number  Int          @default(0)
  subComponent     SubComponent @relation(fields: [id_subcomponents], references: [id], onDelete: Cascade)
  score            Score[]
}

model Score {
  id           Int        @id @default(autoincrement())
  score        String
  notes        String?
  created_at   DateTime   @default(now())
  id_criterias Int
  id_users     Int?
  Evidence     Evidence[]
  criteria     Criteria   @relation(fields: [id_criterias], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [id_users], references: [id])
}

model Evidence {
  id               Int      @id @default(autoincrement())
  file_name        String
  file_type        String
  file_size        Float
  file_path        String
  date_uploaded_at DateTime @default(now())
  id_score         Int
  public_path      String
  score            Score    @relation(fields: [id_score], references: [id], onDelete: Cascade)
}

model ExplainingScore {
  id         Int                 @id @default(autoincrement())
  section    ScoreExplainSection
  pilihan    String
  nilai      String
  penjelasan String
}

model SubComponentScore {
  id               Int          @id @default(autoincrement())
  nilaiAvgOlah     Float?
  nilai            Float?
  persentase       Float?
  grade            String?
  id_subcomponents Int
  subComponent     SubComponent @relation(fields: [id_subcomponents], references: [id], onDelete: Cascade)
}

model ComponentScore {
  id            Int       @id @default(autoincrement())
  nilai         Float?
  id_components Int
  component     Component @relation(fields: [id_components], references: [id], onDelete: Cascade)
}

model EvaluationSheetScore {
  id         Int             @id @default(autoincrement())
  nilai      Float?
  grade      String?
  id_LKE     String
  evaluation EvaluationSheet @relation(fields: [id_LKE], references: [id], onDelete: Cascade)
}

model Settings {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  adminEmail       String
  adminMailPass    String
  adminPhone       String
  appLogoDashboard String
  appLogoLogin     String
  appName          String
  favicon          String
  guideLink        String
  appLogoFooter    String?
}

model ActivityLog {
  id         Int      @id @default(autoincrement())
  actionType String
  tableName  String
  recordId   Int
  id_users   Int?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [id_users], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum StatusEvaluation {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ScoreExplainSection {
  Keberadaan
  Kualitas
  Pemanfaat
}
